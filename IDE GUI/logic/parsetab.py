
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEALEATORIO ASSIGN COMMA CUANDO DCL DEC DESDE DIVIDE ENCASO ENTONS EQUALS FINCASO FINDESDE HAGA HASTA IDEN INC INI INT LBRACE LESS LESS_EQUAL LPAR MIENTRAS MINUS MORE MORE_EQUAL MOVER MULTIPLY NON_EQUAL PLUS RBRACE REPITA RPAR SAME SEPARATOR SINO\n    parse : comparative\n          | sentence\n          | var_declare\n          | empty\n    \n    sentence : var_assign\n             | cases\n             | repeat\n             | do\n             | function\n    \n    function : moves\n             | random\n             | changes\n    \n    changes : MOVER LPAR IDEN RPAR\n    \n    random : ALEATORIO LPAR RPAR\n    \n    moves : moves_aux LPAR IDEN COMMA INT RPAR\n    \n    moves_aux : INC\n              | DEC\n              | INI\n    \n    do : DESDE IDEN EQUALS expression HASTA expression HAGA actions FINDESDE\n    \n    repeat : REPITA actions MIENTRAS comparative\n    \n    cases : syntax1\n          | syntax2\n    \n    syntax2 : ENCASO IDEN options2 SINO LBRACE actions RBRACE FINCASO\n    \n    options2 : CUANDO condition expression ENTONS LBRACE actions RBRACE more_options2\n    \n    more_options2 : options2\n                 | empty\n    \n    syntax1 : ENCASO options1 SINO LBRACE actions RBRACE FINCASO\n    \n    options1 : CUANDO comparative ENTONS LBRACE actions RBRACE more_options1\n    \n    more_options1 : options1\n                  | empty\n    \n    actions : sentence more_actions\n    \n    more_actions : SEPARATOR more_actions_aux\n                 | empty\n    \n    more_actions_aux : actions\n                     | empty\n    \n    var_declare : DCL IDEN value\n    \n    value : initialize\n          | empty\n    \n    initialize : ASSIGN expression\n    \n    comparative : IDEN condition expression\n    \n    var_assign : IDEN EQUALS expression\n    \n    expression : expression operator expression\n    \n    expression : IDEN\n    \n    expression : INT\n    \n    operator : MULTIPLY\n             | DIVIDE\n             | PLUS\n             | MINUS\n    \n    condition : SAME\n              | LESS\n              | MORE\n              | NON_EQUAL\n              | LESS_EQUAL\n              | MORE_EQUAL\n    \n    empty :\n    '
    
_lr_action_items = {'IDEN':([0,12,15,16,20,27,28,29,30,31,32,33,34,42,43,45,53,54,56,58,67,68,69,70,71,78,80,85,87,89,97,100,],[6,35,38,39,41,46,46,-49,-50,-51,-52,-53,-54,63,64,66,46,63,38,46,46,-45,-46,-47,-48,38,46,46,38,38,38,38,]),'DCL':([0,],[12,]),'$end':([0,1,2,3,4,5,7,8,9,10,11,13,14,17,18,19,35,46,47,48,49,50,51,52,65,72,73,83,84,96,98,103,108,],[-55,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-21,-22,-10,-11,-12,-55,-43,-40,-44,-41,-36,-37,-38,-14,-39,-20,-13,-42,-15,-27,-23,-19,]),'REPITA':([0,15,56,78,87,89,97,100,],[15,15,15,15,15,15,15,15,]),'DESDE':([0,15,56,78,87,89,97,100,],[16,16,16,16,16,16,16,16,]),'ENCASO':([0,15,56,78,87,89,97,100,],[20,20,20,20,20,20,20,20,]),'ALEATORIO':([0,15,56,78,87,89,97,100,],[22,22,22,22,22,22,22,22,]),'MOVER':([0,15,56,78,87,89,97,100,],[23,23,23,23,23,23,23,23,]),'INC':([0,15,56,78,87,89,97,100,],[24,24,24,24,24,24,24,24,]),'DEC':([0,15,56,78,87,89,97,100,],[25,25,25,25,25,25,25,25,]),'INI':([0,15,56,78,87,89,97,100,],[26,26,26,26,26,26,26,26,]),'EQUALS':([6,38,39,],[28,28,58,]),'SAME':([6,61,63,],[29,29,29,]),'LESS':([6,61,63,],[30,30,30,]),'MORE':([6,61,63,],[31,31,31,]),'NON_EQUAL':([6,61,63,],[32,32,32,]),'LESS_EQUAL':([6,61,63,],[33,33,33,]),'MORE_EQUAL':([6,61,63,],[34,34,34,]),'SEPARATOR':([7,8,9,10,11,13,14,17,18,19,37,46,47,48,49,65,73,83,84,96,98,103,108,],[-5,-6,-7,-8,-9,-21,-22,-10,-11,-12,56,-43,-40,-44,-41,-14,-20,-13,-42,-15,-27,-23,-19,]),'MIENTRAS':([7,8,9,10,11,13,14,17,18,19,36,37,46,47,48,49,55,56,57,65,73,74,75,76,83,84,96,98,103,108,],[-5,-6,-7,-8,-9,-21,-22,-10,-11,-12,54,-55,-43,-40,-44,-41,-31,-55,-33,-14,-20,-32,-34,-35,-13,-42,-15,-27,-23,-19,]),'RBRACE':([7,8,9,10,11,13,14,17,18,19,37,46,47,48,49,55,56,57,65,73,74,75,76,83,84,86,93,95,96,98,103,104,108,],[-5,-6,-7,-8,-9,-21,-22,-10,-11,-12,-55,-43,-40,-44,-41,-31,-55,-33,-14,-20,-32,-34,-35,-13,-42,92,99,101,-15,-27,-23,109,-19,]),'FINDESDE':([7,8,9,10,11,13,14,17,18,19,37,46,47,48,49,55,56,57,65,73,74,75,76,83,84,96,98,102,103,108,],[-5,-6,-7,-8,-9,-21,-22,-10,-11,-12,-55,-43,-40,-44,-41,-31,-55,-33,-14,-20,-32,-34,-35,-13,-42,-15,-27,108,-23,-19,]),'CUANDO':([20,41,101,109,],[42,61,42,61,]),'LPAR':([21,22,23,24,25,26,],[43,44,45,-16,-17,-18,]),'INT':([27,28,29,30,31,32,33,34,53,58,67,68,69,70,71,80,82,85,],[48,48,-49,-50,-51,-52,-53,-54,48,48,48,-45,-46,-47,-48,48,90,48,]),'ASSIGN':([35,],[53,]),'SINO':([40,60,101,105,106,107,109,110,111,112,],[59,79,-55,-28,-29,-30,-55,-24,-25,-26,]),'RPAR':([44,66,90,],[65,83,96,]),'MULTIPLY':([46,47,48,49,72,77,84,88,91,],[-43,68,-44,68,68,68,68,68,68,]),'DIVIDE':([46,47,48,49,72,77,84,88,91,],[-43,69,-44,69,69,69,69,69,69,]),'PLUS':([46,47,48,49,72,77,84,88,91,],[-43,70,-44,70,70,70,70,70,70,]),'MINUS':([46,47,48,49,72,77,84,88,91,],[-43,71,-44,71,71,71,71,71,71,]),'ENTONS':([46,47,48,62,84,88,],[-43,-40,-44,81,-42,94,]),'HASTA':([46,48,77,84,],[-43,-44,85,-42,]),'HAGA':([46,48,84,91,],[-43,-44,-42,97,]),'LBRACE':([59,79,81,94,],[78,87,89,100,]),'COMMA':([64,],[82,]),'FINCASO':([92,99,],[98,103,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parse':([0,],[1,]),'comparative':([0,42,54,],[2,62,73,]),'sentence':([0,15,56,78,87,89,97,100,],[3,37,37,37,37,37,37,37,]),'var_declare':([0,],[4,]),'empty':([0,35,37,56,101,109,],[5,52,57,76,107,112,]),'var_assign':([0,15,56,78,87,89,97,100,],[7,7,7,7,7,7,7,7,]),'cases':([0,15,56,78,87,89,97,100,],[8,8,8,8,8,8,8,8,]),'repeat':([0,15,56,78,87,89,97,100,],[9,9,9,9,9,9,9,9,]),'do':([0,15,56,78,87,89,97,100,],[10,10,10,10,10,10,10,10,]),'function':([0,15,56,78,87,89,97,100,],[11,11,11,11,11,11,11,11,]),'syntax1':([0,15,56,78,87,89,97,100,],[13,13,13,13,13,13,13,13,]),'syntax2':([0,15,56,78,87,89,97,100,],[14,14,14,14,14,14,14,14,]),'moves':([0,15,56,78,87,89,97,100,],[17,17,17,17,17,17,17,17,]),'random':([0,15,56,78,87,89,97,100,],[18,18,18,18,18,18,18,18,]),'changes':([0,15,56,78,87,89,97,100,],[19,19,19,19,19,19,19,19,]),'moves_aux':([0,15,56,78,87,89,97,100,],[21,21,21,21,21,21,21,21,]),'condition':([6,61,63,],[27,80,27,]),'actions':([15,56,78,87,89,97,100,],[36,75,86,93,95,102,104,]),'options1':([20,101,],[40,106,]),'expression':([27,28,53,58,67,80,85,],[47,49,72,77,84,88,91,]),'value':([35,],[50,]),'initialize':([35,],[51,]),'more_actions':([37,],[55,]),'options2':([41,109,],[60,111,]),'operator':([47,49,72,77,84,88,91,],[67,67,67,67,67,67,67,]),'more_actions_aux':([56,],[74,]),'more_options1':([101,],[105,]),'more_options2':([109,],[110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> parse","S'",1,None,None,None),
  ('parse -> comparative','parse',1,'p_parse','parserPrueba.py',180),
  ('parse -> sentence','parse',1,'p_parse','parserPrueba.py',181),
  ('parse -> var_declare','parse',1,'p_parse','parserPrueba.py',182),
  ('parse -> empty','parse',1,'p_parse','parserPrueba.py',183),
  ('sentence -> var_assign','sentence',1,'p_sentence','parserPrueba.py',190),
  ('sentence -> cases','sentence',1,'p_sentence','parserPrueba.py',191),
  ('sentence -> repeat','sentence',1,'p_sentence','parserPrueba.py',192),
  ('sentence -> do','sentence',1,'p_sentence','parserPrueba.py',193),
  ('sentence -> function','sentence',1,'p_sentence','parserPrueba.py',194),
  ('function -> moves','function',1,'p_function','parserPrueba.py',200),
  ('function -> random','function',1,'p_function','parserPrueba.py',201),
  ('function -> changes','function',1,'p_function','parserPrueba.py',202),
  ('changes -> MOVER LPAR IDEN RPAR','changes',4,'p_changes','parserPrueba.py',208),
  ('random -> ALEATORIO LPAR RPAR','random',3,'p_random','parserPrueba.py',214),
  ('moves -> moves_aux LPAR IDEN COMMA INT RPAR','moves',6,'p_moves','parserPrueba.py',220),
  ('moves_aux -> INC','moves_aux',1,'p_moves_aux','parserPrueba.py',226),
  ('moves_aux -> DEC','moves_aux',1,'p_moves_aux','parserPrueba.py',227),
  ('moves_aux -> INI','moves_aux',1,'p_moves_aux','parserPrueba.py',228),
  ('do -> DESDE IDEN EQUALS expression HASTA expression HAGA actions FINDESDE','do',9,'p_do','parserPrueba.py',234),
  ('repeat -> REPITA actions MIENTRAS comparative','repeat',4,'p_repeat','parserPrueba.py',240),
  ('cases -> syntax1','cases',1,'p_cases','parserPrueba.py',246),
  ('cases -> syntax2','cases',1,'p_cases','parserPrueba.py',247),
  ('syntax2 -> ENCASO IDEN options2 SINO LBRACE actions RBRACE FINCASO','syntax2',8,'p_syntax2','parserPrueba.py',253),
  ('options2 -> CUANDO condition expression ENTONS LBRACE actions RBRACE more_options2','options2',8,'p_options2','parserPrueba.py',259),
  ('more_options2 -> options2','more_options2',1,'p_more_options2','parserPrueba.py',265),
  ('more_options2 -> empty','more_options2',1,'p_more_options2','parserPrueba.py',266),
  ('syntax1 -> ENCASO options1 SINO LBRACE actions RBRACE FINCASO','syntax1',7,'p_syntax1','parserPrueba.py',274),
  ('options1 -> CUANDO comparative ENTONS LBRACE actions RBRACE more_options1','options1',7,'p_options1','parserPrueba.py',280),
  ('more_options1 -> options1','more_options1',1,'p_more_options1','parserPrueba.py',286),
  ('more_options1 -> empty','more_options1',1,'p_more_options1','parserPrueba.py',287),
  ('actions -> sentence more_actions','actions',2,'p_actions','parserPrueba.py',295),
  ('more_actions -> SEPARATOR more_actions_aux','more_actions',2,'p_more_actions','parserPrueba.py',301),
  ('more_actions -> empty','more_actions',1,'p_more_actions','parserPrueba.py',302),
  ('more_actions_aux -> actions','more_actions_aux',1,'p_more_actions_aux','parserPrueba.py',314),
  ('more_actions_aux -> empty','more_actions_aux',1,'p_more_actions_aux','parserPrueba.py',315),
  ('var_declare -> DCL IDEN value','var_declare',3,'p_var_declare','parserPrueba.py',321),
  ('value -> initialize','value',1,'p_value','parserPrueba.py',328),
  ('value -> empty','value',1,'p_value','parserPrueba.py',329),
  ('initialize -> ASSIGN expression','initialize',2,'p_initialize','parserPrueba.py',336),
  ('comparative -> IDEN condition expression','comparative',3,'p_comparative','parserPrueba.py',343),
  ('var_assign -> IDEN EQUALS expression','var_assign',3,'p_var_assign','parserPrueba.py',350),
  ('expression -> expression operator expression','expression',3,'p_expression','parserPrueba.py',356),
  ('expression -> IDEN','expression',1,'p_expression_var','parserPrueba.py',363),
  ('expression -> INT','expression',1,'p_expression_int','parserPrueba.py',370),
  ('operator -> MULTIPLY','operator',1,'p_operator','parserPrueba.py',376),
  ('operator -> DIVIDE','operator',1,'p_operator','parserPrueba.py',377),
  ('operator -> PLUS','operator',1,'p_operator','parserPrueba.py',378),
  ('operator -> MINUS','operator',1,'p_operator','parserPrueba.py',379),
  ('condition -> SAME','condition',1,'p_condition','parserPrueba.py',385),
  ('condition -> LESS','condition',1,'p_condition','parserPrueba.py',386),
  ('condition -> MORE','condition',1,'p_condition','parserPrueba.py',387),
  ('condition -> NON_EQUAL','condition',1,'p_condition','parserPrueba.py',388),
  ('condition -> LESS_EQUAL','condition',1,'p_condition','parserPrueba.py',389),
  ('condition -> MORE_EQUAL','condition',1,'p_condition','parserPrueba.py',390),
  ('empty -> <empty>','empty',0,'p_empty','parserPrueba.py',405),
]
