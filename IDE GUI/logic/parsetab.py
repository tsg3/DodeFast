
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEALEATORIO ASSIGN COMMA CUANDO DCL DEC DESDE DIVIDE ENCASO ENTONS EQUALS FINCASO FINDESDE HAGA HASTA IDEN INC INI INT LBRACE LESS LESS_EQUAL LLAMAR LPAR MIENTRAS MINUS MORE MORE_EQUAL MOVER MULTIPLY NON_EQUAL PLUS RBRACE REPITA RPAR SAME SEPARATOR SINO\n    parse : comparative\n          | sentence\n          | var_declare\n          | proc\n          | IDEN\n          | empty\n    \n    proc : LLAMAR IDEN LPAR params RPAR\n    \n    params : expression more_params\n    \n    more_params : COMMA params\n                | empty\n    \n    sentence : var_assign\n             | cases\n             | repeat\n             | do\n             | function\n             | proc\n    \n    function : moves\n             | random\n             | changes\n    \n    moves : MOVER LPAR IDEN RPAR\n    \n    random : ALEATORIO LPAR RPAR\n    \n    changes : changes_aux LPAR IDEN COMMA INT RPAR\n    \n    changes_aux : INC\n                | DEC\n                | INI\n    \n    do : DESDE IDEN EQUALS expression HASTA expression HAGA actions FINDESDE\n    \n    repeat : REPITA actions MIENTRAS comparative\n    \n    cases : syntax1\n          | syntax2\n    \n    syntax2 : ENCASO IDEN options2 SINO LBRACE actions RBRACE FINCASO\n    \n    options2 : CUANDO condition expression ENTONS LBRACE actions RBRACE more_options2\n    \n    more_options2 : options2\n                 | empty\n    \n    syntax1 : ENCASO options1 SINO LBRACE actions RBRACE FINCASO\n    \n    options1 : CUANDO comparative ENTONS LBRACE actions RBRACE more_options1\n    \n    more_options1 : options1\n                  | empty\n    \n    actions : sentence more_actions\n    \n    more_actions : SEPARATOR more_actions_aux\n                 | empty\n    \n    more_actions_aux : actions\n                     | empty\n    \n    var_declare : DCL IDEN value\n    \n    value : initialize\n          | empty\n    \n    initialize : ASSIGN expression\n    \n    comparative : IDEN condition expression\n    \n    var_assign : IDEN EQUALS expression\n    \n    expression : expression operator expression\n    \n    expression : IDEN\n    \n    expression : INT\n    \n    operator : MULTIPLY\n             | DIVIDE\n             | PLUS\n             | MINUS\n    \n    condition : SAME\n              | LESS\n              | MORE\n              | NON_EQUAL\n              | LESS_EQUAL\n              | MORE_EQUAL\n    \n    empty :\n    '
    
_lr_action_items = {'IDEN':([0,13,14,17,18,22,29,30,31,32,33,34,35,36,46,47,49,57,58,59,61,63,72,73,74,75,76,85,87,94,96,98,100,109,112,],[6,37,38,42,43,45,50,50,-56,-57,-58,-59,-60,-61,68,69,71,50,50,68,42,50,50,-52,-53,-54,-55,42,50,50,50,42,42,42,42,]),'DCL':([0,],[13,]),'LLAMAR':([0,17,61,85,98,100,109,112,],[14,14,14,14,14,14,14,14,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,19,20,21,37,50,51,52,53,54,55,56,70,77,80,89,91,92,108,110,115,120,],[-62,0,-1,-2,-3,-4,-5,-6,-11,-12,-13,-14,-15,-28,-29,-17,-18,-19,-62,-50,-47,-51,-48,-43,-44,-45,-21,-46,-27,-20,-49,-7,-22,-34,-30,-26,]),'REPITA':([0,17,61,85,98,100,109,112,],[17,17,17,17,17,17,17,17,]),'DESDE':([0,17,61,85,98,100,109,112,],[18,18,18,18,18,18,18,18,]),'ENCASO':([0,17,61,85,98,100,109,112,],[22,22,22,22,22,22,22,22,]),'MOVER':([0,17,61,85,98,100,109,112,],[23,23,23,23,23,23,23,23,]),'ALEATORIO':([0,17,61,85,98,100,109,112,],[24,24,24,24,24,24,24,24,]),'INC':([0,17,61,85,98,100,109,112,],[26,26,26,26,26,26,26,26,]),'DEC':([0,17,61,85,98,100,109,112,],[27,27,27,27,27,27,27,27,]),'INI':([0,17,61,85,98,100,109,112,],[28,28,28,28,28,28,28,28,]),'EQUALS':([6,42,43,],[30,30,63,]),'SAME':([6,66,68,],[31,31,31,]),'LESS':([6,66,68,],[32,32,32,]),'MORE':([6,66,68,],[33,33,33,]),'NON_EQUAL':([6,66,68,],[34,34,34,]),'LESS_EQUAL':([6,66,68,],[35,35,35,]),'MORE_EQUAL':([6,66,68,],[36,36,36,]),'SEPARATOR':([8,9,10,11,12,15,16,19,20,21,40,41,50,51,52,53,70,80,89,91,92,108,110,115,120,],[-11,-12,-13,-14,-15,-28,-29,-17,-18,-19,61,-16,-50,-47,-51,-48,-21,-27,-20,-49,-7,-22,-34,-30,-26,]),'MIENTRAS':([8,9,10,11,12,15,16,19,20,21,39,40,41,50,51,52,53,60,61,62,70,80,81,82,83,89,91,92,108,110,115,120,],[-11,-12,-13,-14,-15,-28,-29,-17,-18,-19,59,-62,-16,-50,-47,-51,-48,-38,-62,-40,-21,-27,-39,-41,-42,-20,-49,-7,-22,-34,-30,-26,]),'RBRACE':([8,9,10,11,12,15,16,19,20,21,40,41,50,51,52,53,60,61,62,70,80,81,82,83,89,91,92,97,105,107,108,110,115,116,120,],[-11,-12,-13,-14,-15,-28,-29,-17,-18,-19,-62,-16,-50,-47,-51,-48,-38,-62,-40,-21,-27,-39,-41,-42,-20,-49,-7,104,111,113,-22,-34,-30,121,-26,]),'FINDESDE':([8,9,10,11,12,15,16,19,20,21,40,41,50,51,52,53,60,61,62,70,80,81,82,83,89,91,92,108,110,114,115,120,],[-11,-12,-13,-14,-15,-28,-29,-17,-18,-19,-62,-16,-50,-47,-51,-48,-38,-62,-40,-21,-27,-39,-41,-42,-20,-49,-7,-22,-34,120,-30,-26,]),'CUANDO':([22,45,113,121,],[46,66,46,66,]),'LPAR':([23,24,25,26,27,28,38,],[47,48,49,-23,-24,-25,58,]),'INT':([29,30,31,32,33,34,35,36,57,58,63,72,73,74,75,76,87,90,94,96,],[52,52,-56,-57,-58,-59,-60,-61,52,52,52,52,-52,-53,-54,-55,52,101,52,52,]),'ASSIGN':([37,],[57,]),'SINO':([44,65,113,117,118,119,121,122,123,124,],[64,86,-62,-35,-36,-37,-62,-31,-32,-33,]),'RPAR':([48,50,52,69,78,79,91,93,95,101,102,],[70,-50,-51,89,92,-62,-49,-8,-10,108,-9,]),'MULTIPLY':([50,51,52,53,77,79,84,91,99,103,],[-50,73,-51,73,73,73,73,73,73,73,]),'DIVIDE':([50,51,52,53,77,79,84,91,99,103,],[-50,74,-51,74,74,74,74,74,74,74,]),'PLUS':([50,51,52,53,77,79,84,91,99,103,],[-50,75,-51,75,75,75,75,75,75,75,]),'MINUS':([50,51,52,53,77,79,84,91,99,103,],[-50,76,-51,76,76,76,76,76,76,76,]),'ENTONS':([50,51,52,67,91,99,],[-50,-47,-51,88,-49,106,]),'COMMA':([50,52,71,79,91,],[-50,-51,90,94,-49,]),'HASTA':([50,52,84,91,],[-50,-51,96,-49,]),'HAGA':([50,52,91,103,],[-50,-51,-49,109,]),'LBRACE':([64,86,88,106,],[85,98,100,112,]),'FINCASO':([104,111,],[110,115,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parse':([0,],[1,]),'comparative':([0,46,59,],[2,67,80,]),'sentence':([0,17,61,85,98,100,109,112,],[3,40,40,40,40,40,40,40,]),'var_declare':([0,],[4,]),'proc':([0,17,61,85,98,100,109,112,],[5,41,41,41,41,41,41,41,]),'empty':([0,37,40,61,79,113,121,],[7,56,62,83,95,119,124,]),'var_assign':([0,17,61,85,98,100,109,112,],[8,8,8,8,8,8,8,8,]),'cases':([0,17,61,85,98,100,109,112,],[9,9,9,9,9,9,9,9,]),'repeat':([0,17,61,85,98,100,109,112,],[10,10,10,10,10,10,10,10,]),'do':([0,17,61,85,98,100,109,112,],[11,11,11,11,11,11,11,11,]),'function':([0,17,61,85,98,100,109,112,],[12,12,12,12,12,12,12,12,]),'syntax1':([0,17,61,85,98,100,109,112,],[15,15,15,15,15,15,15,15,]),'syntax2':([0,17,61,85,98,100,109,112,],[16,16,16,16,16,16,16,16,]),'moves':([0,17,61,85,98,100,109,112,],[19,19,19,19,19,19,19,19,]),'random':([0,17,61,85,98,100,109,112,],[20,20,20,20,20,20,20,20,]),'changes':([0,17,61,85,98,100,109,112,],[21,21,21,21,21,21,21,21,]),'changes_aux':([0,17,61,85,98,100,109,112,],[25,25,25,25,25,25,25,25,]),'condition':([6,66,68,],[29,87,29,]),'actions':([17,61,85,98,100,109,112,],[39,82,97,105,107,114,116,]),'options1':([22,113,],[44,118,]),'expression':([29,30,57,58,63,72,87,94,96,],[51,53,77,79,84,91,99,79,103,]),'value':([37,],[54,]),'initialize':([37,],[55,]),'more_actions':([40,],[60,]),'options2':([45,121,],[65,123,]),'operator':([51,53,77,79,84,91,99,103,],[72,72,72,72,72,72,72,72,]),'params':([58,94,],[78,102,]),'more_actions_aux':([61,],[81,]),'more_params':([79,],[93,]),'more_options1':([113,],[117,]),'more_options2':([121,],[122,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> parse","S'",1,None,None,None),
  ('parse -> comparative','parse',1,'p_parse','parserPrueba.py',256),
  ('parse -> sentence','parse',1,'p_parse','parserPrueba.py',257),
  ('parse -> var_declare','parse',1,'p_parse','parserPrueba.py',258),
  ('parse -> proc','parse',1,'p_parse','parserPrueba.py',259),
  ('parse -> IDEN','parse',1,'p_parse','parserPrueba.py',260),
  ('parse -> empty','parse',1,'p_parse','parserPrueba.py',261),
  ('proc -> LLAMAR IDEN LPAR params RPAR','proc',5,'p_proc','parserPrueba.py',277),
  ('params -> expression more_params','params',2,'p_params','parserPrueba.py',284),
  ('more_params -> COMMA params','more_params',2,'p_more_params','parserPrueba.py',291),
  ('more_params -> empty','more_params',1,'p_more_params','parserPrueba.py',292),
  ('sentence -> var_assign','sentence',1,'p_sentence','parserPrueba.py',302),
  ('sentence -> cases','sentence',1,'p_sentence','parserPrueba.py',303),
  ('sentence -> repeat','sentence',1,'p_sentence','parserPrueba.py',304),
  ('sentence -> do','sentence',1,'p_sentence','parserPrueba.py',305),
  ('sentence -> function','sentence',1,'p_sentence','parserPrueba.py',306),
  ('sentence -> proc','sentence',1,'p_sentence','parserPrueba.py',307),
  ('function -> moves','function',1,'p_function','parserPrueba.py',314),
  ('function -> random','function',1,'p_function','parserPrueba.py',315),
  ('function -> changes','function',1,'p_function','parserPrueba.py',316),
  ('moves -> MOVER LPAR IDEN RPAR','moves',4,'p_moves','parserPrueba.py',323),
  ('random -> ALEATORIO LPAR RPAR','random',3,'p_random','parserPrueba.py',330),
  ('changes -> changes_aux LPAR IDEN COMMA INT RPAR','changes',6,'p_changes','parserPrueba.py',337),
  ('changes_aux -> INC','changes_aux',1,'p_changes_aux','parserPrueba.py',344),
  ('changes_aux -> DEC','changes_aux',1,'p_changes_aux','parserPrueba.py',345),
  ('changes_aux -> INI','changes_aux',1,'p_changes_aux','parserPrueba.py',346),
  ('do -> DESDE IDEN EQUALS expression HASTA expression HAGA actions FINDESDE','do',9,'p_do','parserPrueba.py',353),
  ('repeat -> REPITA actions MIENTRAS comparative','repeat',4,'p_repeat','parserPrueba.py',360),
  ('cases -> syntax1','cases',1,'p_cases','parserPrueba.py',367),
  ('cases -> syntax2','cases',1,'p_cases','parserPrueba.py',368),
  ('syntax2 -> ENCASO IDEN options2 SINO LBRACE actions RBRACE FINCASO','syntax2',8,'p_syntax2','parserPrueba.py',375),
  ('options2 -> CUANDO condition expression ENTONS LBRACE actions RBRACE more_options2','options2',8,'p_options2','parserPrueba.py',382),
  ('more_options2 -> options2','more_options2',1,'p_more_options2','parserPrueba.py',389),
  ('more_options2 -> empty','more_options2',1,'p_more_options2','parserPrueba.py',390),
  ('syntax1 -> ENCASO options1 SINO LBRACE actions RBRACE FINCASO','syntax1',7,'p_syntax1','parserPrueba.py',399),
  ('options1 -> CUANDO comparative ENTONS LBRACE actions RBRACE more_options1','options1',7,'p_options1','parserPrueba.py',406),
  ('more_options1 -> options1','more_options1',1,'p_more_options1','parserPrueba.py',413),
  ('more_options1 -> empty','more_options1',1,'p_more_options1','parserPrueba.py',414),
  ('actions -> sentence more_actions','actions',2,'p_actions','parserPrueba.py',423),
  ('more_actions -> SEPARATOR more_actions_aux','more_actions',2,'p_more_actions','parserPrueba.py',430),
  ('more_actions -> empty','more_actions',1,'p_more_actions','parserPrueba.py',431),
  ('more_actions_aux -> actions','more_actions_aux',1,'p_more_actions_aux','parserPrueba.py',444),
  ('more_actions_aux -> empty','more_actions_aux',1,'p_more_actions_aux','parserPrueba.py',445),
  ('var_declare -> DCL IDEN value','var_declare',3,'p_var_declare','parserPrueba.py',452),
  ('value -> initialize','value',1,'p_value','parserPrueba.py',459),
  ('value -> empty','value',1,'p_value','parserPrueba.py',460),
  ('initialize -> ASSIGN expression','initialize',2,'p_initialize','parserPrueba.py',467),
  ('comparative -> IDEN condition expression','comparative',3,'p_comparative','parserPrueba.py',474),
  ('var_assign -> IDEN EQUALS expression','var_assign',3,'p_var_assign','parserPrueba.py',481),
  ('expression -> expression operator expression','expression',3,'p_expression','parserPrueba.py',488),
  ('expression -> IDEN','expression',1,'p_expression_var','parserPrueba.py',495),
  ('expression -> INT','expression',1,'p_expression_int','parserPrueba.py',502),
  ('operator -> MULTIPLY','operator',1,'p_operator','parserPrueba.py',509),
  ('operator -> DIVIDE','operator',1,'p_operator','parserPrueba.py',510),
  ('operator -> PLUS','operator',1,'p_operator','parserPrueba.py',511),
  ('operator -> MINUS','operator',1,'p_operator','parserPrueba.py',512),
  ('condition -> SAME','condition',1,'p_condition','parserPrueba.py',519),
  ('condition -> LESS','condition',1,'p_condition','parserPrueba.py',520),
  ('condition -> MORE','condition',1,'p_condition','parserPrueba.py',521),
  ('condition -> NON_EQUAL','condition',1,'p_condition','parserPrueba.py',522),
  ('condition -> LESS_EQUAL','condition',1,'p_condition','parserPrueba.py',523),
  ('condition -> MORE_EQUAL','condition',1,'p_condition','parserPrueba.py',524),
  ('empty -> <empty>','empty',0,'p_empty','parserPrueba.py',574),
]
