
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEASSIGN CUANDO DCL DESDE DIVIDE ENCASO ENTONS EQUALS FINCASO FINDESDE HAGA HASTA IDEN INT LBRACE LESS LESS_EQUAL MIENTRAS MINUS MORE MORE_EQUAL MULTIPLY NON_EQUAL PLUS RBRACE REPITA SAME SEPARATOR SINO\n    parse : comparative\n          | sentence\n          | cases\n          | empty\n          | repeat\n          | do\n    \n    do : DESDE IDEN EQUALS expression HASTA expression HAGA FINDESDE\n    \n    repeat : REPITA actions MIENTRAS comparative\n    \n    cases : syntax1\n          | syntax2\n    \n    syntax2 : ENCASO IDEN options2 SINO LBRACE actions RBRACE FINCASO\n    \n    options2 : CUANDO condition expression ENTONS LBRACE actions RBRACE more_options2\n    \n    more_options2 : options2\n                 | empty\n    \n    syntax1 : ENCASO options1 SINO LBRACE actions RBRACE FINCASO\n    \n    options1 : CUANDO comparative ENTONS LBRACE actions RBRACE more_options1\n    \n    more_options1 : options1\n                 | empty\n    \n    actions : var_assign more_actions\n    \n    more_actions : SEPARATOR actions\n                 | empty\n    \n    sentence : var_declare\n             | var_assign\n    \n    var_declare : DCL IDEN value\n    \n    value : initialize\n          | empty\n    \n    initialize : ASSIGN expression\n    \n    comparative : IDEN condition expression\n    \n    var_assign : IDEN EQUALS expression\n    \n    expression : expression operator expression\n    \n    expression : IDEN\n    \n    expression : INT\n    \n    operator : MULTIPLY\n             | DIVIDE\n             | PLUS\n             | MINUS\n    \n    condition : SAME\n              | LESS\n              | MORE\n              | NON_EQUAL\n              | LESS_EQUAL\n              | MORE_EQUAL\n    \n    empty :\n    '
    
_lr_action_items = {'IDEN':([0,13,14,15,16,17,18,19,20,21,22,23,24,32,37,39,41,45,51,52,53,54,55,60,62,65,67,69,78,],[8,27,28,29,31,33,33,-37,-38,-39,-40,-41,-42,50,50,27,33,33,33,-33,-34,-35,-36,27,33,33,27,27,27,]),'$end':([0,1,2,3,4,5,6,7,9,10,11,12,29,33,34,35,36,42,43,44,56,59,64,76,80,81,],[-43,0,-1,-2,-3,-4,-5,-6,-22,-23,-9,-10,-43,-31,-28,-32,-29,-24,-25,-26,-8,-27,-30,-15,-7,-11,]),'REPITA':([0,],[13,]),'DESDE':([0,],[14,]),'DCL':([0,],[15,]),'ENCASO':([0,],[16,]),'EQUALS':([8,27,28,],[18,18,41,]),'SAME':([8,48,50,],[19,19,19,]),'LESS':([8,48,50,],[20,20,20,]),'MORE':([8,48,50,],[21,21,21,]),'NON_EQUAL':([8,48,50,],[22,22,22,]),'LESS_EQUAL':([8,48,50,],[23,23,23,]),'MORE_EQUAL':([8,48,50,],[24,24,24,]),'CUANDO':([16,31,79,86,],[32,48,32,48,]),'INT':([17,18,19,20,21,22,23,24,41,45,51,52,53,54,55,62,65,],[35,35,-37,-38,-39,-40,-41,-42,35,35,35,-33,-34,-35,-36,35,35,]),'MIENTRAS':([25,26,33,35,36,38,40,57,64,],[37,-43,-31,-32,-29,-19,-21,-20,-30,]),'SEPARATOR':([26,33,35,36,64,],[39,-31,-32,-29,-30,]),'RBRACE':([26,33,35,36,38,40,57,64,66,72,74,82,],[-43,-31,-32,-29,-19,-21,-20,-30,71,77,79,86,]),'ASSIGN':([29,],[45,]),'SINO':([30,47,79,83,84,85,86,87,88,89,],[46,61,-43,-16,-17,-18,-43,-12,-13,-14,]),'MULTIPLY':([33,34,35,36,58,59,64,68,70,],[-31,52,-32,52,52,52,52,52,52,]),'DIVIDE':([33,34,35,36,58,59,64,68,70,],[-31,53,-32,53,53,53,53,53,53,]),'PLUS':([33,34,35,36,58,59,64,68,70,],[-31,54,-32,54,54,54,54,54,54,]),'MINUS':([33,34,35,36,58,59,64,68,70,],[-31,55,-32,55,55,55,55,55,55,]),'ENTONS':([33,34,35,49,64,68,],[-31,-28,-32,63,-30,73,]),'HASTA':([33,35,58,64,],[-31,-32,65,-30,]),'HAGA':([33,35,64,70,],[-31,-32,-30,75,]),'LBRACE':([46,61,63,73,],[60,67,69,78,]),'FINCASO':([71,77,],[76,81,]),'FINDESDE':([75,],[80,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parse':([0,],[1,]),'comparative':([0,32,37,],[2,49,56,]),'sentence':([0,],[3,]),'cases':([0,],[4,]),'empty':([0,26,29,79,86,],[5,40,44,85,89,]),'repeat':([0,],[6,]),'do':([0,],[7,]),'var_declare':([0,],[9,]),'var_assign':([0,13,39,60,67,69,78,],[10,26,26,26,26,26,26,]),'syntax1':([0,],[11,]),'syntax2':([0,],[12,]),'condition':([8,48,50,],[17,62,17,]),'actions':([13,39,60,67,69,78,],[25,57,66,72,74,82,]),'options1':([16,79,],[30,84,]),'expression':([17,18,41,45,51,62,65,],[34,36,58,59,64,68,70,]),'more_actions':([26,],[38,]),'value':([29,],[42,]),'initialize':([29,],[43,]),'options2':([31,86,],[47,88,]),'operator':([34,36,58,59,64,68,70,],[51,51,51,51,51,51,51,]),'more_options1':([79,],[83,]),'more_options2':([86,],[87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> parse","S'",1,None,None,None),
  ('parse -> comparative','parse',1,'p_parse','parserPrueba.py',140),
  ('parse -> sentence','parse',1,'p_parse','parserPrueba.py',141),
  ('parse -> cases','parse',1,'p_parse','parserPrueba.py',142),
  ('parse -> empty','parse',1,'p_parse','parserPrueba.py',143),
  ('parse -> repeat','parse',1,'p_parse','parserPrueba.py',144),
  ('parse -> do','parse',1,'p_parse','parserPrueba.py',145),
  ('do -> DESDE IDEN EQUALS expression HASTA expression HAGA FINDESDE','do',8,'p_do','parserPrueba.py',152),
  ('repeat -> REPITA actions MIENTRAS comparative','repeat',4,'p_repeat','parserPrueba.py',158),
  ('cases -> syntax1','cases',1,'p_cases','parserPrueba.py',164),
  ('cases -> syntax2','cases',1,'p_cases','parserPrueba.py',165),
  ('syntax2 -> ENCASO IDEN options2 SINO LBRACE actions RBRACE FINCASO','syntax2',8,'p_syntax2','parserPrueba.py',171),
  ('options2 -> CUANDO condition expression ENTONS LBRACE actions RBRACE more_options2','options2',8,'p_options2','parserPrueba.py',177),
  ('more_options2 -> options2','more_options2',1,'p_more_options2','parserPrueba.py',183),
  ('more_options2 -> empty','more_options2',1,'p_more_options2','parserPrueba.py',184),
  ('syntax1 -> ENCASO options1 SINO LBRACE actions RBRACE FINCASO','syntax1',7,'p_syntax1','parserPrueba.py',192),
  ('options1 -> CUANDO comparative ENTONS LBRACE actions RBRACE more_options1','options1',7,'p_options1','parserPrueba.py',198),
  ('more_options1 -> options1','more_options1',1,'p_more_options1','parserPrueba.py',204),
  ('more_options1 -> empty','more_options1',1,'p_more_options1','parserPrueba.py',205),
  ('actions -> var_assign more_actions','actions',2,'p_actions','parserPrueba.py',213),
  ('more_actions -> SEPARATOR actions','more_actions',2,'p_more_actions','parserPrueba.py',219),
  ('more_actions -> empty','more_actions',1,'p_more_actions','parserPrueba.py',220),
  ('sentence -> var_declare','sentence',1,'p_sentence','parserPrueba.py',229),
  ('sentence -> var_assign','sentence',1,'p_sentence','parserPrueba.py',230),
  ('var_declare -> DCL IDEN value','var_declare',3,'p_var_declare','parserPrueba.py',236),
  ('value -> initialize','value',1,'p_value','parserPrueba.py',243),
  ('value -> empty','value',1,'p_value','parserPrueba.py',244),
  ('initialize -> ASSIGN expression','initialize',2,'p_initialize','parserPrueba.py',251),
  ('comparative -> IDEN condition expression','comparative',3,'p_comparative','parserPrueba.py',258),
  ('var_assign -> IDEN EQUALS expression','var_assign',3,'p_var_assign','parserPrueba.py',265),
  ('expression -> expression operator expression','expression',3,'p_expression','parserPrueba.py',271),
  ('expression -> IDEN','expression',1,'p_expression_var','parserPrueba.py',278),
  ('expression -> INT','expression',1,'p_expression_int','parserPrueba.py',285),
  ('operator -> MULTIPLY','operator',1,'p_operator','parserPrueba.py',291),
  ('operator -> DIVIDE','operator',1,'p_operator','parserPrueba.py',292),
  ('operator -> PLUS','operator',1,'p_operator','parserPrueba.py',293),
  ('operator -> MINUS','operator',1,'p_operator','parserPrueba.py',294),
  ('condition -> SAME','condition',1,'p_condition','parserPrueba.py',300),
  ('condition -> LESS','condition',1,'p_condition','parserPrueba.py',301),
  ('condition -> MORE','condition',1,'p_condition','parserPrueba.py',302),
  ('condition -> NON_EQUAL','condition',1,'p_condition','parserPrueba.py',303),
  ('condition -> LESS_EQUAL','condition',1,'p_condition','parserPrueba.py',304),
  ('condition -> MORE_EQUAL','condition',1,'p_condition','parserPrueba.py',305),
  ('empty -> <empty>','empty',0,'p_empty','parserPrueba.py',320),
]
