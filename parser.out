Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> parse
Rule 1     parse -> expression
Rule 2     parse -> var_declare
Rule 3     parse -> var_assign
Rule 4     parse -> empty
Rule 5     var_declare -> DCL IDEN value
Rule 6     value -> initialize
Rule 7     value -> empty
Rule 8     initialize -> ASSIGN expression
Rule 9     var_assign -> IDEN EQUALS expression
Rule 10    expression -> expression MULTIPLY expression
Rule 11    expression -> expression DIVIDE expression
Rule 12    expression -> expression PLUS expression
Rule 13    expression -> expression MINUS expression
Rule 14    expression -> expression condition expression
Rule 15    expression -> INT
Rule 16    expression -> IDEN
Rule 17    condition -> EQUALS
Rule 18    condition -> LESS
Rule 19    condition -> MORE
Rule 20    condition -> NON_EQUAL
Rule 21    condition -> LESS_EQUAL
Rule 22    condition -> MORE_EQUAL
Rule 23    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 8
DCL                  : 5
DIVIDE               : 11
EQUALS               : 9 17
IDEN                 : 5 9 16
INT                  : 15
LESS                 : 18
LESS_EQUAL           : 21
MINUS                : 13
MORE                 : 19
MORE_EQUAL           : 22
MULTIPLY             : 10
NON_EQUAL            : 20
PLUS                 : 12
error                : 

Nonterminals, with rules where they appear

condition            : 14
empty                : 4 7
expression           : 1 8 9 10 10 11 11 12 12 13 13 14 14
initialize           : 6
parse                : 0
value                : 5
var_assign           : 3
var_declare          : 2

Parsing method: LALR

state 0

    (0) S' -> . parse
    (1) parse -> . expression
    (2) parse -> . var_declare
    (3) parse -> . var_assign
    (4) parse -> . empty
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression condition expression
    (15) expression -> . INT
    (16) expression -> . IDEN
    (5) var_declare -> . DCL IDEN value
    (9) var_assign -> . IDEN EQUALS expression
    (23) empty -> .

    INT             shift and go to state 6
    IDEN            shift and go to state 7
    DCL             shift and go to state 8
    $end            reduce using rule 23 (empty -> .)

    parse                          shift and go to state 1
    expression                     shift and go to state 2
    var_declare                    shift and go to state 3
    var_assign                     shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> parse .



state 2

    (1) parse -> expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . condition expression
    (17) condition -> . EQUALS
    (18) condition -> . LESS
    (19) condition -> . MORE
    (20) condition -> . NON_EQUAL
    (21) condition -> . LESS_EQUAL
    (22) condition -> . MORE_EQUAL

    $end            reduce using rule 1 (parse -> expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    EQUALS          shift and go to state 14
    LESS            shift and go to state 15
    MORE            shift and go to state 16
    NON_EQUAL       shift and go to state 17
    LESS_EQUAL      shift and go to state 18
    MORE_EQUAL      shift and go to state 19

    condition                      shift and go to state 13

state 3

    (2) parse -> var_declare .

    $end            reduce using rule 2 (parse -> var_declare .)


state 4

    (3) parse -> var_assign .

    $end            reduce using rule 3 (parse -> var_assign .)


state 5

    (4) parse -> empty .

    $end            reduce using rule 4 (parse -> empty .)


state 6

    (15) expression -> INT .

    MULTIPLY        reduce using rule 15 (expression -> INT .)
    DIVIDE          reduce using rule 15 (expression -> INT .)
    PLUS            reduce using rule 15 (expression -> INT .)
    MINUS           reduce using rule 15 (expression -> INT .)
    EQUALS          reduce using rule 15 (expression -> INT .)
    LESS            reduce using rule 15 (expression -> INT .)
    MORE            reduce using rule 15 (expression -> INT .)
    NON_EQUAL       reduce using rule 15 (expression -> INT .)
    LESS_EQUAL      reduce using rule 15 (expression -> INT .)
    MORE_EQUAL      reduce using rule 15 (expression -> INT .)
    $end            reduce using rule 15 (expression -> INT .)


state 7

    (16) expression -> IDEN .
    (9) var_assign -> IDEN . EQUALS expression

  ! shift/reduce conflict for EQUALS resolved as shift
    MULTIPLY        reduce using rule 16 (expression -> IDEN .)
    DIVIDE          reduce using rule 16 (expression -> IDEN .)
    PLUS            reduce using rule 16 (expression -> IDEN .)
    MINUS           reduce using rule 16 (expression -> IDEN .)
    LESS            reduce using rule 16 (expression -> IDEN .)
    MORE            reduce using rule 16 (expression -> IDEN .)
    NON_EQUAL       reduce using rule 16 (expression -> IDEN .)
    LESS_EQUAL      reduce using rule 16 (expression -> IDEN .)
    MORE_EQUAL      reduce using rule 16 (expression -> IDEN .)
    $end            reduce using rule 16 (expression -> IDEN .)
    EQUALS          shift and go to state 20

  ! EQUALS          [ reduce using rule 16 (expression -> IDEN .) ]


state 8

    (5) var_declare -> DCL . IDEN value

    IDEN            shift and go to state 21


state 9

    (10) expression -> expression MULTIPLY . expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression condition expression
    (15) expression -> . INT
    (16) expression -> . IDEN

    INT             shift and go to state 6
    IDEN            shift and go to state 23

    expression                     shift and go to state 22

state 10

    (11) expression -> expression DIVIDE . expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression condition expression
    (15) expression -> . INT
    (16) expression -> . IDEN

    INT             shift and go to state 6
    IDEN            shift and go to state 23

    expression                     shift and go to state 24

state 11

    (12) expression -> expression PLUS . expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression condition expression
    (15) expression -> . INT
    (16) expression -> . IDEN

    INT             shift and go to state 6
    IDEN            shift and go to state 23

    expression                     shift and go to state 25

state 12

    (13) expression -> expression MINUS . expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression condition expression
    (15) expression -> . INT
    (16) expression -> . IDEN

    INT             shift and go to state 6
    IDEN            shift and go to state 23

    expression                     shift and go to state 26

state 13

    (14) expression -> expression condition . expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression condition expression
    (15) expression -> . INT
    (16) expression -> . IDEN

    INT             shift and go to state 6
    IDEN            shift and go to state 23

    expression                     shift and go to state 27

state 14

    (17) condition -> EQUALS .

    INT             reduce using rule 17 (condition -> EQUALS .)
    IDEN            reduce using rule 17 (condition -> EQUALS .)


state 15

    (18) condition -> LESS .

    INT             reduce using rule 18 (condition -> LESS .)
    IDEN            reduce using rule 18 (condition -> LESS .)


state 16

    (19) condition -> MORE .

    INT             reduce using rule 19 (condition -> MORE .)
    IDEN            reduce using rule 19 (condition -> MORE .)


state 17

    (20) condition -> NON_EQUAL .

    INT             reduce using rule 20 (condition -> NON_EQUAL .)
    IDEN            reduce using rule 20 (condition -> NON_EQUAL .)


state 18

    (21) condition -> LESS_EQUAL .

    INT             reduce using rule 21 (condition -> LESS_EQUAL .)
    IDEN            reduce using rule 21 (condition -> LESS_EQUAL .)


state 19

    (22) condition -> MORE_EQUAL .

    INT             reduce using rule 22 (condition -> MORE_EQUAL .)
    IDEN            reduce using rule 22 (condition -> MORE_EQUAL .)


state 20

    (9) var_assign -> IDEN EQUALS . expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression condition expression
    (15) expression -> . INT
    (16) expression -> . IDEN

    INT             shift and go to state 6
    IDEN            shift and go to state 23

    expression                     shift and go to state 28

state 21

    (5) var_declare -> DCL IDEN . value
    (6) value -> . initialize
    (7) value -> . empty
    (8) initialize -> . ASSIGN expression
    (23) empty -> .

    ASSIGN          shift and go to state 32
    $end            reduce using rule 23 (empty -> .)

    value                          shift and go to state 29
    initialize                     shift and go to state 30
    empty                          shift and go to state 31

state 22

    (10) expression -> expression MULTIPLY expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . condition expression
    (17) condition -> . EQUALS
    (18) condition -> . LESS
    (19) condition -> . MORE
    (20) condition -> . NON_EQUAL
    (21) condition -> . LESS_EQUAL
    (22) condition -> . MORE_EQUAL

    MULTIPLY        reduce using rule 10 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 10 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 10 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 10 (expression -> expression MULTIPLY expression .)
    EQUALS          reduce using rule 10 (expression -> expression MULTIPLY expression .)
    LESS            reduce using rule 10 (expression -> expression MULTIPLY expression .)
    MORE            reduce using rule 10 (expression -> expression MULTIPLY expression .)
    NON_EQUAL       reduce using rule 10 (expression -> expression MULTIPLY expression .)
    LESS_EQUAL      reduce using rule 10 (expression -> expression MULTIPLY expression .)
    MORE_EQUAL      reduce using rule 10 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 10 (expression -> expression MULTIPLY expression .)

  ! MULTIPLY        [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]
  ! EQUALS          [ shift and go to state 14 ]
  ! LESS            [ shift and go to state 15 ]
  ! MORE            [ shift and go to state 16 ]
  ! NON_EQUAL       [ shift and go to state 17 ]
  ! LESS_EQUAL      [ shift and go to state 18 ]
  ! MORE_EQUAL      [ shift and go to state 19 ]

    condition                      shift and go to state 13

state 23

    (16) expression -> IDEN .

    MULTIPLY        reduce using rule 16 (expression -> IDEN .)
    DIVIDE          reduce using rule 16 (expression -> IDEN .)
    PLUS            reduce using rule 16 (expression -> IDEN .)
    MINUS           reduce using rule 16 (expression -> IDEN .)
    EQUALS          reduce using rule 16 (expression -> IDEN .)
    LESS            reduce using rule 16 (expression -> IDEN .)
    MORE            reduce using rule 16 (expression -> IDEN .)
    NON_EQUAL       reduce using rule 16 (expression -> IDEN .)
    LESS_EQUAL      reduce using rule 16 (expression -> IDEN .)
    MORE_EQUAL      reduce using rule 16 (expression -> IDEN .)
    $end            reduce using rule 16 (expression -> IDEN .)


state 24

    (11) expression -> expression DIVIDE expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . condition expression
    (17) condition -> . EQUALS
    (18) condition -> . LESS
    (19) condition -> . MORE
    (20) condition -> . NON_EQUAL
    (21) condition -> . LESS_EQUAL
    (22) condition -> . MORE_EQUAL

    MULTIPLY        reduce using rule 11 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 11 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 11 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 11 (expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 11 (expression -> expression DIVIDE expression .)
    LESS            reduce using rule 11 (expression -> expression DIVIDE expression .)
    MORE            reduce using rule 11 (expression -> expression DIVIDE expression .)
    NON_EQUAL       reduce using rule 11 (expression -> expression DIVIDE expression .)
    LESS_EQUAL      reduce using rule 11 (expression -> expression DIVIDE expression .)
    MORE_EQUAL      reduce using rule 11 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 11 (expression -> expression DIVIDE expression .)

  ! MULTIPLY        [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]
  ! EQUALS          [ shift and go to state 14 ]
  ! LESS            [ shift and go to state 15 ]
  ! MORE            [ shift and go to state 16 ]
  ! NON_EQUAL       [ shift and go to state 17 ]
  ! LESS_EQUAL      [ shift and go to state 18 ]
  ! MORE_EQUAL      [ shift and go to state 19 ]

    condition                      shift and go to state 13

state 25

    (12) expression -> expression PLUS expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . condition expression
    (17) condition -> . EQUALS
    (18) condition -> . LESS
    (19) condition -> . MORE
    (20) condition -> . NON_EQUAL
    (21) condition -> . LESS_EQUAL
    (22) condition -> . MORE_EQUAL

    PLUS            reduce using rule 12 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 12 (expression -> expression PLUS expression .)
    EQUALS          reduce using rule 12 (expression -> expression PLUS expression .)
    LESS            reduce using rule 12 (expression -> expression PLUS expression .)
    MORE            reduce using rule 12 (expression -> expression PLUS expression .)
    NON_EQUAL       reduce using rule 12 (expression -> expression PLUS expression .)
    LESS_EQUAL      reduce using rule 12 (expression -> expression PLUS expression .)
    MORE_EQUAL      reduce using rule 12 (expression -> expression PLUS expression .)
    $end            reduce using rule 12 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10

  ! MULTIPLY        [ reduce using rule 12 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 12 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]
  ! EQUALS          [ shift and go to state 14 ]
  ! LESS            [ shift and go to state 15 ]
  ! MORE            [ shift and go to state 16 ]
  ! NON_EQUAL       [ shift and go to state 17 ]
  ! LESS_EQUAL      [ shift and go to state 18 ]
  ! MORE_EQUAL      [ shift and go to state 19 ]

    condition                      shift and go to state 13

state 26

    (13) expression -> expression MINUS expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . condition expression
    (17) condition -> . EQUALS
    (18) condition -> . LESS
    (19) condition -> . MORE
    (20) condition -> . NON_EQUAL
    (21) condition -> . LESS_EQUAL
    (22) condition -> . MORE_EQUAL

    PLUS            reduce using rule 13 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 13 (expression -> expression MINUS expression .)
    EQUALS          reduce using rule 13 (expression -> expression MINUS expression .)
    LESS            reduce using rule 13 (expression -> expression MINUS expression .)
    MORE            reduce using rule 13 (expression -> expression MINUS expression .)
    NON_EQUAL       reduce using rule 13 (expression -> expression MINUS expression .)
    LESS_EQUAL      reduce using rule 13 (expression -> expression MINUS expression .)
    MORE_EQUAL      reduce using rule 13 (expression -> expression MINUS expression .)
    $end            reduce using rule 13 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10

  ! MULTIPLY        [ reduce using rule 13 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 13 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]
  ! EQUALS          [ shift and go to state 14 ]
  ! LESS            [ shift and go to state 15 ]
  ! MORE            [ shift and go to state 16 ]
  ! NON_EQUAL       [ shift and go to state 17 ]
  ! LESS_EQUAL      [ shift and go to state 18 ]
  ! MORE_EQUAL      [ shift and go to state 19 ]

    condition                      shift and go to state 13

state 27

    (14) expression -> expression condition expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . condition expression
    (17) condition -> . EQUALS
    (18) condition -> . LESS
    (19) condition -> . MORE
    (20) condition -> . NON_EQUAL
    (21) condition -> . LESS_EQUAL
    (22) condition -> . MORE_EQUAL

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for MORE resolved as shift
  ! shift/reduce conflict for NON_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for MORE_EQUAL resolved as shift
    $end            reduce using rule 14 (expression -> expression condition expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    EQUALS          shift and go to state 14
    LESS            shift and go to state 15
    MORE            shift and go to state 16
    NON_EQUAL       shift and go to state 17
    LESS_EQUAL      shift and go to state 18
    MORE_EQUAL      shift and go to state 19

  ! MULTIPLY        [ reduce using rule 14 (expression -> expression condition expression .) ]
  ! DIVIDE          [ reduce using rule 14 (expression -> expression condition expression .) ]
  ! PLUS            [ reduce using rule 14 (expression -> expression condition expression .) ]
  ! MINUS           [ reduce using rule 14 (expression -> expression condition expression .) ]
  ! EQUALS          [ reduce using rule 14 (expression -> expression condition expression .) ]
  ! LESS            [ reduce using rule 14 (expression -> expression condition expression .) ]
  ! MORE            [ reduce using rule 14 (expression -> expression condition expression .) ]
  ! NON_EQUAL       [ reduce using rule 14 (expression -> expression condition expression .) ]
  ! LESS_EQUAL      [ reduce using rule 14 (expression -> expression condition expression .) ]
  ! MORE_EQUAL      [ reduce using rule 14 (expression -> expression condition expression .) ]

    condition                      shift and go to state 13

state 28

    (9) var_assign -> IDEN EQUALS expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . condition expression
    (17) condition -> . EQUALS
    (18) condition -> . LESS
    (19) condition -> . MORE
    (20) condition -> . NON_EQUAL
    (21) condition -> . LESS_EQUAL
    (22) condition -> . MORE_EQUAL

    $end            reduce using rule 9 (var_assign -> IDEN EQUALS expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    EQUALS          shift and go to state 14
    LESS            shift and go to state 15
    MORE            shift and go to state 16
    NON_EQUAL       shift and go to state 17
    LESS_EQUAL      shift and go to state 18
    MORE_EQUAL      shift and go to state 19

    condition                      shift and go to state 13

state 29

    (5) var_declare -> DCL IDEN value .

    $end            reduce using rule 5 (var_declare -> DCL IDEN value .)


state 30

    (6) value -> initialize .

    $end            reduce using rule 6 (value -> initialize .)


state 31

    (7) value -> empty .

    $end            reduce using rule 7 (value -> empty .)


state 32

    (8) initialize -> ASSIGN . expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression condition expression
    (15) expression -> . INT
    (16) expression -> . IDEN

    INT             shift and go to state 6
    IDEN            shift and go to state 23

    expression                     shift and go to state 33

state 33

    (8) initialize -> ASSIGN expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . condition expression
    (17) condition -> . EQUALS
    (18) condition -> . LESS
    (19) condition -> . MORE
    (20) condition -> . NON_EQUAL
    (21) condition -> . LESS_EQUAL
    (22) condition -> . MORE_EQUAL

    $end            reduce using rule 8 (initialize -> ASSIGN expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    EQUALS          shift and go to state 14
    LESS            shift and go to state 15
    MORE            shift and go to state 16
    NON_EQUAL       shift and go to state 17
    LESS_EQUAL      shift and go to state 18
    MORE_EQUAL      shift and go to state 19

    condition                      shift and go to state 13
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUALS in state 7 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 27 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 27 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 27 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 27 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 27 resolved as shift
WARNING: shift/reduce conflict for LESS in state 27 resolved as shift
WARNING: shift/reduce conflict for MORE in state 27 resolved as shift
WARNING: shift/reduce conflict for NON_EQUAL in state 27 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 27 resolved as shift
WARNING: shift/reduce conflict for MORE_EQUAL in state 27 resolved as shift
