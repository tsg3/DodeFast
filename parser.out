Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> parse
Rule 1     parse -> expression
Rule 2     parse -> var_declare
Rule 3     parse -> var_assign
Rule 4     parse -> empty
Rule 5     var_declare -> DCL IDEN value
Rule 6     value -> initialize
Rule 7     value -> empty
Rule 8     initialize -> ASSIGN expression
Rule 9     var_assign -> IDEN EQUALS expression
Rule 10    expression -> expression MULTIPLY expression
Rule 11    expression -> expression DIVIDE expression
Rule 12    expression -> expression PLUS expression
Rule 13    expression -> expression MINUS expression
Rule 14    expression -> INT
Rule 15    expression -> IDEN
Rule 16    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 8
DCL                  : 5
DIVIDE               : 11
EQUALS               : 9
IDEN                 : 5 9 15
INT                  : 14
MINUS                : 13
MULTIPLY             : 10
PLUS                 : 12
error                : 

Nonterminals, with rules where they appear

empty                : 4 7
expression           : 1 8 9 10 10 11 11 12 12 13 13
initialize           : 6
parse                : 0
value                : 5
var_assign           : 3
var_declare          : 2

Parsing method: LALR

state 0

    (0) S' -> . parse
    (1) parse -> . expression
    (2) parse -> . var_declare
    (3) parse -> . var_assign
    (4) parse -> . empty
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . INT
    (15) expression -> . IDEN
    (5) var_declare -> . DCL IDEN value
    (9) var_assign -> . IDEN EQUALS expression
    (16) empty -> .

    INT             shift and go to state 6
    IDEN            shift and go to state 7
    DCL             shift and go to state 8
    $end            reduce using rule 16 (empty -> .)

    parse                          shift and go to state 1
    expression                     shift and go to state 2
    var_declare                    shift and go to state 3
    var_assign                     shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> parse .



state 2

    (1) parse -> expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression

    $end            reduce using rule 1 (parse -> expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 3

    (2) parse -> var_declare .

    $end            reduce using rule 2 (parse -> var_declare .)


state 4

    (3) parse -> var_assign .

    $end            reduce using rule 3 (parse -> var_assign .)


state 5

    (4) parse -> empty .

    $end            reduce using rule 4 (parse -> empty .)


state 6

    (14) expression -> INT .

    MULTIPLY        reduce using rule 14 (expression -> INT .)
    DIVIDE          reduce using rule 14 (expression -> INT .)
    PLUS            reduce using rule 14 (expression -> INT .)
    MINUS           reduce using rule 14 (expression -> INT .)
    $end            reduce using rule 14 (expression -> INT .)


state 7

    (15) expression -> IDEN .
    (9) var_assign -> IDEN . EQUALS expression

    MULTIPLY        reduce using rule 15 (expression -> IDEN .)
    DIVIDE          reduce using rule 15 (expression -> IDEN .)
    PLUS            reduce using rule 15 (expression -> IDEN .)
    MINUS           reduce using rule 15 (expression -> IDEN .)
    $end            reduce using rule 15 (expression -> IDEN .)
    EQUALS          shift and go to state 13


state 8

    (5) var_declare -> DCL . IDEN value

    IDEN            shift and go to state 14


state 9

    (10) expression -> expression MULTIPLY . expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . INT
    (15) expression -> . IDEN

    INT             shift and go to state 6
    IDEN            shift and go to state 16

    expression                     shift and go to state 15

state 10

    (11) expression -> expression DIVIDE . expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . INT
    (15) expression -> . IDEN

    INT             shift and go to state 6
    IDEN            shift and go to state 16

    expression                     shift and go to state 17

state 11

    (12) expression -> expression PLUS . expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . INT
    (15) expression -> . IDEN

    INT             shift and go to state 6
    IDEN            shift and go to state 16

    expression                     shift and go to state 18

state 12

    (13) expression -> expression MINUS . expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . INT
    (15) expression -> . IDEN

    INT             shift and go to state 6
    IDEN            shift and go to state 16

    expression                     shift and go to state 19

state 13

    (9) var_assign -> IDEN EQUALS . expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . INT
    (15) expression -> . IDEN

    INT             shift and go to state 6
    IDEN            shift and go to state 16

    expression                     shift and go to state 20

state 14

    (5) var_declare -> DCL IDEN . value
    (6) value -> . initialize
    (7) value -> . empty
    (8) initialize -> . ASSIGN expression
    (16) empty -> .

    ASSIGN          shift and go to state 24
    $end            reduce using rule 16 (empty -> .)

    value                          shift and go to state 21
    initialize                     shift and go to state 22
    empty                          shift and go to state 23

state 15

    (10) expression -> expression MULTIPLY expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 10 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 10 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 10 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 10 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 10 (expression -> expression MULTIPLY expression .)

  ! MULTIPLY        [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 16

    (15) expression -> IDEN .

    MULTIPLY        reduce using rule 15 (expression -> IDEN .)
    DIVIDE          reduce using rule 15 (expression -> IDEN .)
    PLUS            reduce using rule 15 (expression -> IDEN .)
    MINUS           reduce using rule 15 (expression -> IDEN .)
    $end            reduce using rule 15 (expression -> IDEN .)


state 17

    (11) expression -> expression DIVIDE expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 11 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 11 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 11 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 11 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 11 (expression -> expression DIVIDE expression .)

  ! MULTIPLY        [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 18

    (12) expression -> expression PLUS expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression

    PLUS            reduce using rule 12 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 12 (expression -> expression PLUS expression .)
    $end            reduce using rule 12 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10

  ! MULTIPLY        [ reduce using rule 12 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 12 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 19

    (13) expression -> expression MINUS expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression

    PLUS            reduce using rule 13 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 13 (expression -> expression MINUS expression .)
    $end            reduce using rule 13 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10

  ! MULTIPLY        [ reduce using rule 13 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 13 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 20

    (9) var_assign -> IDEN EQUALS expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression

    $end            reduce using rule 9 (var_assign -> IDEN EQUALS expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 21

    (5) var_declare -> DCL IDEN value .

    $end            reduce using rule 5 (var_declare -> DCL IDEN value .)


state 22

    (6) value -> initialize .

    $end            reduce using rule 6 (value -> initialize .)


state 23

    (7) value -> empty .

    $end            reduce using rule 7 (value -> empty .)


state 24

    (8) initialize -> ASSIGN . expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . INT
    (15) expression -> . IDEN

    INT             shift and go to state 6
    IDEN            shift and go to state 16

    expression                     shift and go to state 25

state 25

    (8) initialize -> ASSIGN expression .
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression

    $end            reduce using rule 8 (initialize -> ASSIGN expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

